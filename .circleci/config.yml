# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
defaults: &defaults
  working_directory: ~/PongDang-API
  docker:
    - image: circleci/ruby:2.5.3
    - image: circleci/redis:latest
version: 2
jobs:
  checkout code:
    <<: *defaults
    steps:
      - restore_cache:
          key: PongDang-{{ .Environment.CIRCLE_SHA1 }}
      - checkout
      - save_cache:
          key: PongDang-{{ .Environment.CIRCLE_SHA1 }}
          paths: ~/PongDang-API
  bundle dependencies:
    <<: *defaults
    steps:
      - restore_cache:
          key: PongDang-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: PongDang-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install latest gem system and bundler
          command: |
            gem update --system
            gem install bundler
      - run:
          name: Install dependencies
          command: bundle install --jobs=10 --retry=3 --path vendor/bundle
      - save_cache:
          key: PongDang-{{ checksum "Gemfile.lock" }}
          paths: vendor/bundle
      - persist_to_workspace:
          root: .
          paths: vendor/bundle
  test:
    <<: *defaults
    steps:
      - restore_cache:
          key: PongDang-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: PongDang-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install latest gem system and bundler
          command: |
            gem update --system
            gem install bundler
      - run:
          name: Use packages
          command: bundle --path vendor/bundle
      - run:
          name: Set environment values for redis test
          command: |
            export REDIS_DB=$TEST_REDIS_DB
            export REDIS_HOST=$TEST_REDIS_HOST
            export REDIS_PORT=$TEST_REDIS_PORT
      - run:
          name: Run tests
          command: DISABLE_SPRING=true bundle exec rspec
          when: always
      - store_test_results:
          path: test/reports
      - store_artifacts:
          path: test/reports
          destination: test-reports
  rubocop:
    <<: *defaults
    steps:
      - restore_cache:
          key: PongDang-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: PongDang-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install latest gem system and bundler
          command: |
            gem update --system
            gem install bundler
      - run:
          name: Use packages
          command: bundle --path vendor/bundle
      - run:
          name: Rubocop analyze code
          command: bundle exec rubocop
  deploy:
    <<: *defaults
    steps:
      - restore_cache:
          key: PongDang-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: PongDang-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install latest gem system and bundler
          command: |
            gem update --system
            gem install bundler
      - run:
          name: Use packages
          command: bundle --path vendor/bundle
      - run:
          name: Install rsync
          command: sudo apt install rsync
      - run:
          name:  Install AWS CLI
          command: |
            if which aws > /dev/null; then
              echo "The AWS CLI is already installed. Skipping."
              exit 0
            fi
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                sudo $PIP install awscli --upgrade
              else
                # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
                $PIP install awscli --upgrade --user
              fi
            elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
              cd
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              if which sudo > /dev/null; then
                sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              else
                # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
                awscli-bundle/install -b ~/bin/aws
              fi
              rm -rf awscli-bundle*
              cd -
            else
              echo "Unable to install AWS CLI. Please install pip."
              exit 1
            fi
      - run:
          name: Set AWS Access Key ID
          command: aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      - run:
          name: Set AWS SECRET ACCESS KEY
          command: aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      - run:
          name: Set AWS Region
          command: aws configure set region $AWS_DEFAULT_REGION
      - run:
          name: Set AWS Outpur
          command: aws configure set output json
      - run:
          name: Set environment values for redis production
          command: |
            export REDIS_DB=$PRODUCTION_REDIS_DB
            export REDIS_HOST=$PRODUCTION_REDIS_HOST
            export REDIS_PORT=$PRODUCTION_REDIS_PORT
            export REDIS_PASSWORD=$PRODUCTION_REDIS_PASSWORD
      - run:
          name: Deploy
          command: bundle exec jets deploy production
workflows:
  version: 2
  test-and-deploy:
    jobs:
      - checkout code
      - bundle dependencies:
          requires:
            - checkout code
      - test:
          requires:
            - bundle dependencies
      - rubocop:
          requires:
            - bundle dependencies
      - deploy:
          requires:
            - test
            - rubocop
          filters:
            branches:
              only: master
